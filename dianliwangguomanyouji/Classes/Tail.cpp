////  Tail.cpp//  dianliwangguomanyouji////  Created by szsycx on 5/17/15.////#include "Tail.h"Scene * Tail::createScene(){    Scene * scene = Scene::create();    Layer * layer = Tail::create();    scene->addChild(layer);    return scene;}bool Tail::init(){    if(!Layer::init()){        return false;    }    Size winSize = Director::getInstance()->getVisibleSize();    auto bg = Sprite::create("tbg.jpg");    bg->setPosition(Vec2(winSize.width/2.0,winSize.height/2.0));    addChild(bg);        overWold2 = Sprite::create("overword2.png");    overWold2->setPosition(Vec2(overWold2->getContentSize().width*7.0/10.0,overWold2->getContentSize().height));    addChild(overWold2);        overWold = Sprite::create("overword.png");    overWold->setPosition(Vec2(overWold->getContentSize().width*5.2/10.0,winSize.height*6.0/10.0));    addChild(overWold);            bool isMale = UserDefault::getInstance()->getBoolForKey("male",true);    if(isMale){        c = Sprite::create("menu/c1.png");    }else{        c = Sprite::create("menu/c2.png");    }    c->setPosition(Vec2(winSize.width*8.5/10.0,winSize.height*5.8/10.0));    addChild(c);        con = Sprite::create("tail_continue.png");    con->setPosition(Vec2(winSize.width*7.5/10.0,winSize.height*1.2/10.0));    addChild(con);        String nameS = UserDefault::getInstance()->getStringForKey("name", "小明");    name = Text::create(nameS.getCString(), "fonts/zhongwen.ttf", 60);    name->setPosition(Vec2(winSize.width*2.5/10.0,winSize.height*9.0/10.0));    addChild(name);        word1 = Sprite::create("word1.png");    word1->setPosition(Vec2(winSize.width*1.3/4.0,winSize.height-word1->getContentSize().height*3.0/4.0));    addChild(word1);        word2 = Sprite::create("word2.png");    word2->setPosition(Vec2(winSize.width*1.3/4.0,word2->getContentSize().height*3.0/4.0));    addChild(word2);        word3 = Sprite::create("word3.png");    word3->setPosition(Vec2(winSize.width*4.0/5.0,word3->getContentSize().height*8.0/10.0));    addChild(word3);        word1->setVisible(false);    word2->setVisible(false);    word3->setVisible(false);        auto listener = EventListenerTouchOneByOne::create();    listener->onTouchBegan= [&](Touch* touch,Event * event){        if(event->getCurrentTarget()->getBoundingBox().containsPoint(touch->getLocation())){//            int tag = event->getCurrentTarget()->getTag();//            if(tag==0){//                con->setVisible(false);//                overWold->setVisible(false);//                c->setVisible(false);//                name->setVisible(false);//            }else if(tag==1){//                Director::getInstance()->replaceScene(MenuScene::createScene());//                Director::getInstance()->resume();//            }                                    return true;        }        return false;    };    listener->onTouchMoved= [](Touch* touch,Event * event){        if(event->getCurrentTarget()->getBoundingBox().containsPoint(touch->getLocation())){                    }            };    listener->onTouchEnded= [&](Touch* touch,Event * event){        if(event->getCurrentTarget()->getBoundingBox().containsPoint(touch->getLocation())){            int tag = event->getCurrentTarget()->getTag();            if(tag==0){                con->setVisible(false);                overWold->setVisible(false);                                overWold2->setVisible(false);                c->setVisible(false);                name->setVisible(false);                word1->setVisible(true);                word2->setVisible(true);                word3->setVisible(true);            }else if(tag==1 && !con->isVisible()){                Director::getInstance()->replaceScene(MenuScene::createScene());                Director::getInstance()->resume();            }                            }            };    con->setTag(0);    word1->setTag(1);    word2->setTag(1);    word3->setTag(1);    _eventDispatcher->addEventListenerWithSceneGraphPriority(listener->clone(),word1);    _eventDispatcher->addEventListenerWithSceneGraphPriority(listener->clone(),word2);    _eventDispatcher->addEventListenerWithSceneGraphPriority(listener->clone(),word3);    _eventDispatcher->addEventListenerWithSceneGraphPriority(listener->clone(),con);        //    scheduleUpdate();    return true;}void Tail::update(float dt){//    time+=dt;//    if(time>=10){//        Director::getInstance()->replaceScene(MenuScene::createScene());//    }}