////  LevelScene.cpp//  dianliwangguomanyouji////  Created by szsycx on 3/16/15.////#include "LevelScene.h"#include "CastleScene.h"#include "GameScene.h"#include "ShopScene.h"#include "MagicGame.h"Scene * LevelScene::createScene(){    Scene * scene = Scene::create();    Layer * layer  = LevelScene::create();    scene->addChild(layer);    return scene;}bool LevelScene::init(){    if(!Layer::init()){        return false;    }    currentSeason = UserDefault::getInstance()->getIntegerForKey("current_season", 1);               maxLevel = UserDefault::getInstance()->getIntegerForKey(StringUtils::format("max_level%d",currentSeason).c_str(), 1);//    maxLevel = 12;        int bean = UserDefault::getInstance()->getIntegerForKey("bean");    int item1 = UserDefault::getInstance()->getIntegerForKey("item1");    int item2 =UserDefault::getInstance()->getIntegerForKey("item2");    int item3 = UserDefault::getInstance()->getIntegerForKey("item3");   // int item4 =UserDefault::getInstance()->getIntegerForKey("item4");    if(item1<0){        item1=0;}    if(item2<0){        item2 = 0;    } if(item3<0){        item3=0;}   // if(item4<0){    //    item4 = 0;    //}    if(bean<0){    bean=0;}            Size visibleSize = Director::getInstance()->getVisibleSize();        auto bg = Sprite::create(StringUtils::format("level/bg%d.jpg",currentSeason).c_str());    bg->setPosition(Vec2(visibleSize.width/2.0, visibleSize.height/2.0));    addChild(bg);                 auto listener = EventListenerTouchOneByOne::create();    listener->setSwallowTouches(true);    listener->onTouchBegan=[](Touch* touch,Event * event){        if(event->getCurrentTarget()->getBoundingBox().containsPoint(touch->getLocation())){            return true;        }        return false;    };    listener->onTouchMoved=[](Touch*touch,Event*event){            };    listener->onTouchEnded=[&](Touch*touch,Event*event){        Vec2 tp = touch->getLocation();        log("touch x%f,visi width%f",tp.x,visibleSize.width);        if(event->getCurrentTarget()->getBoundingBox().containsPoint(touch->getLocation())){                        Sprite* sprite = static_cast<Sprite*>(event->getCurrentTarget())    ;            int tag = sprite->getTag();                      if(tag==SHOP_TAG){                Director::getInstance()->replaceScene(ShopScene::createScene());            }else if(tag==BACK_TAG){                Director::getInstance()->replaceScene(CastleScene::createScene());            }else if(tag==ITEM_BG){                Vec2 location = touch->getLocation();                if(location.x<visibleSize.width/2.0&&location.x>visibleSize.width*4.0/10.0){                    itemInfo1->setVisible(true);                    itemInfo2->setVisible(false);                    itemInfo3->setVisible(false);                   // itemInfo4->setVisible(false);                }else if(location.x>visibleSize.width*6.0/10.0&&location.x<visibleSize.width*8.0/10.0){                    itemInfo1->setVisible(false);                    itemInfo2->setVisible(true);                    itemInfo3->setVisible(false);                   // itemInfo4->setVisible(false);                }else if(location.x>visibleSize.width*8.2/10.0){                    itemInfo1->setVisible(false);                    itemInfo2->setVisible(false);                    itemInfo3->setVisible(true);                    //itemInfo4->setVisible(false);                }else {                    itemInfo1->setVisible(false);                    itemInfo2->setVisible(false);                    itemInfo3->setVisible(false);                    //itemInfo4->setVisible(true);                }            }else{                if(tag<=maxLevel){                    UserDefault::getInstance()->setIntegerForKey("current_level", tag);                    UserDefault::getInstance()->flush();                    if(tag==6||tag==11){                        Director::getInstance()->replaceScene(MagicGame::createScene());                    }else{//                        Director::getInstance()->replaceScene(MagicGame::createScene());                        Director::getInstance()->replaceScene(GameScene::createScene());                    }                }            }        }            };        auto back = Sprite::create("level/back.png");    back->setTag(BACK_TAG);    back->setPosition(Vec2(back->getContentSize().width*6.0/10.0,back->getContentSize().height*6.0/10.0));    _eventDispatcher->addEventListenerWithSceneGraphPriority(listener->clone(), back);    addChild(back);        auto shop = Sprite::create("level/shop.png");    shop->setTag(SHOP_TAG);    shop->setPosition(Vec2(shop->getContentSize().width/2.0+2.0,visibleSize.height-shop->getContentSize().height*6.0/10.0));    _eventDispatcher->addEventListenerWithSceneGraphPriority(listener->clone(), shop);    auto sequence = Sequence::create(ScaleTo::create(0.5, 1.05),ScaleTo::create(0.5, 0.9),NULL);    auto repeat = RepeatForever::create(sequence);    shop->runAction(repeat);    addChild(shop);        auto shopTitle = Sprite::create("shoptitle.png");    shopTitle->setPosition(Vec2(visibleSize.width*2.5/10.0, visibleSize.height*8.5/10.0));    addChild(shopTitle);                vector<float> positions;    positions.push_back(visibleSize.width*12/100);    positions.push_back(visibleSize.height*55/100);    positions.push_back(visibleSize.width*20/100);    positions.push_back(visibleSize.height*40/100);    positions.push_back(visibleSize.width*21/100);    positions.push_back(visibleSize.height*15/100);        positions.push_back(visibleSize.width*37/100);    positions.push_back(visibleSize.height*18/100);        positions.push_back(visibleSize.width*42/100);    positions.push_back(visibleSize.height*45/100);        positions.push_back(visibleSize.width*45/100);    positions.push_back(visibleSize.height*70/100);    positions.push_back(visibleSize.width*58/100);    positions.push_back(visibleSize.height*65/100);    positions.push_back(visibleSize.width*68/100);    positions.push_back(visibleSize.height*55/100);    positions.push_back(visibleSize.width*70/100);    positions.push_back(visibleSize.height*40/100);        positions.push_back(visibleSize.width*75/100);    positions.push_back(visibleSize.height*15/100);    positions.push_back(visibleSize.width*88/100);    positions.push_back(visibleSize.height*25/100);    positions.push_back(visibleSize.width*93/100);    positions.push_back(visibleSize.height*50/100);            for(int i = 1;i<=LEVEL_NUMBER;i++){        Sprite * level=  Sprite::create(StringUtils::format("level/l%d.png",i).c_str());        if(i<=maxLevel){            if(i==6||i==11){//                bool haveDone = UserDefault::getInstance()->getBoolForKey(StringUtils::format("magic%d%d",currentSeason,i).c_str(),false);                                if(maxLevel==i){                    _eventDispatcher->addEventListenerWithSceneGraphPriority(listener->clone(), level);                }            }else{                _eventDispatcher->addEventListenerWithSceneGraphPriority(listener->clone(), level);            }        }else{                        level->setColor(Color3B(155,155, 155));        }        level->setTag(i);        level->setPosition(Vec2(positions[2*(i-1)],positions[2*(i-1)+1]));        addChild(level);    }                auto dbg = Sprite::create("level/dbg.png");    dbg->setPosition(Vec2(visibleSize.width-1-dbg->getContentSize().width/2.0,visibleSize.height-dbg->getContentSize().height/2.0-0.5));    dbg->setTag(ITEM_BG);    _eventDispatcher->addEventListenerWithSceneGraphPriority(listener->clone(), dbg);    addChild(dbg);    auto mbg = Sprite::create("level/mbg.png");    mbg->setPosition(Vec2(visibleSize.width/4.0,visibleSize.height-1-mbg->getContentSize().height/2.0));    addChild(mbg);        auto beanText = Text::create(StringUtils::format("%d",bean).c_str(), "", 32);    auto item1Text = Text::create(StringUtils::format("%d",item1).c_str(), "", 30);    auto item2Text = Text::create(StringUtils::format("%d",item2).c_str(), "", 30);    auto item3Text = Text::create(StringUtils::format("%d",item3).c_str(), "", 30);   // auto item4Text = Text::create(StringUtils::format("%d",item4).c_str(), "", 30);    beanText->setPosition(Vec2(visibleSize.width*2.5/10.0,visibleSize.height*9.45/10.0));    item1Text->setPosition(Vec2(visibleSize.width*7.2/10.0,visibleSize.height*9.4/10.0));    item2Text->setPosition(Vec2(visibleSize.width*5.4/10.0,visibleSize.height*9.4/10.0));    item3Text->setPosition(Vec2(visibleSize.width*9.3/10.0,visibleSize.height*9.4/10.0));   // item4Text->setPosition(Vec2(visibleSize.width*9.5/10.0,visibleSize.height*9.4/10.0));            addChild(beanText);    addChild(item1Text);    addChild(item2Text);    addChild(item3Text);  //  addChild(item4Text);        itemInfo1 = Button::create("infobg.png");        itemInfo1->setTitleFontSize(50);    itemInfo1->setTitleColor(Color3B(93,44,24));    itemInfo1->setPosition(Vec2(visibleSize.width*6.5/10.0,visibleSize.height*8.0/10.0));    itemInfo1->setTitleText("延长10秒答题时间");    itemInfo2 = Button::create("infobg.png");    itemInfo2->setTitleText("去掉一个错误答案");    itemInfo2->setPosition(Vec2(visibleSize.width*7.8/10.0,visibleSize.height*8.0/10.0));    itemInfo3 = Button::create("infobg.png");    itemInfo3->setTitleText("帮你跳过这道题目");    itemInfo3->setPosition(Vec2(visibleSize.width*8.0/10.0,visibleSize.height*8.0/10.0));   // itemInfo4 = Button::create("infobg.png");   // itemInfo4->setTitleText("答错题目而不受惩罚");   // itemInfo4->setPosition(Vec2(visibleSize.width-itemInfo4->getContentSize().width/2.0,visibleSize.height*8.0/10.0));    itemInfo2->setTitleFontSize(50);    itemInfo2->setTitleColor(Color3B(93,44,24));    itemInfo3->setTitleFontSize(50);    itemInfo3->setTitleColor(Color3B(93,44,24));   // itemInfo4->setTitleFontSize(50);  //  itemInfo4->setTitleColor(Color3B(93,44,24));        itemInfo1->setVisible(false);    itemInfo2->setVisible(false);    itemInfo3->setVisible(false);   // itemInfo4->setVisible(false);        itemInfo1->addTouchEventListener([&](Ref* pSender,Widget::TouchEventType type){        if(type==Widget::TouchEventType::ENDED){            itemInfo1->setVisible(false);        }    });    itemInfo2->addTouchEventListener([&](Ref* pSender,Widget::TouchEventType type){        if(type==Widget::TouchEventType::ENDED){            itemInfo2->setVisible(false);        }    });    itemInfo3->addTouchEventListener([&](Ref* pSender,Widget::TouchEventType type){        if(type==Widget::TouchEventType::ENDED){            itemInfo3->setVisible(false);        }    });    //itemInfo4->addTouchEventListener([&](Ref* pSender,Widget::TouchEventType type){        //if(type==Widget::TouchEventType::ENDED){       //     itemInfo4->setVisible(false);      //  }  //  });            addChild(itemInfo1);    addChild(itemInfo2);    addChild(itemInfo3);    //addChild(itemInfo4);        return true;}